/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package unsupervisedstatistical;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 *
 * @author SEABIRDS-PC
 */
public class TextSimplification extends javax.swing.JFrame {

    /**
     * Creates new form TextSimplification
     */
    
    private static final Set<String> STOPWORDS = new HashSet<>();
    public static ArrayList allSimplifiedTexts=new ArrayList();
    
    public TextSimplification() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 102, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Text Simplification");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(282, 282, 282)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jButton1.setText("Unsupervised Statistical Text Simplification");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Simplified Text Sentiment Analysis using Latent Dirichlet Allocation (LDA) and Probabilistic Latent Semantic Analysis (PLSA)");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 869, Short.MAX_VALUE))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try 
        {
            File stopwordsFile = new File("stopwords1.txt");
            FileInputStream fis = new FileInputStream(stopwordsFile);
            BufferedReader br = new BufferedReader(new InputStreamReader(fis, StandardCharsets.UTF_8));

            String line;
            while ((line = br.readLine()) != null) {
                STOPWORDS.add(line.trim());
            }
            br.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        jTextArea1.append("==========================================================================================\n");
        jTextArea1.append("                                             Simplified Text\n");
        jTextArea1.append("==========================================================================================\n");            
        
        String dataset=MainFrame.dataset;
        String sp[]=dataset.trim().split("\n");
        for(int i=0;i<sp.length;i++)
        {
            System.out.println(i);
            String originalText=sp[i].trim();
            
            // Step 1: Convert text to lowercase
            String lowercaseText = originalText.toLowerCase();

            // Step 2: Tokenize the text into sentences and words
            List<List<String>> sentences = tokenize(lowercaseText);

            // Step 3: Remove stopwords and punctuations
            List<List<String>> filteredSentences = filter(sentences);

            // Step 4: Calculate sentence scores
            Map<List<String>, Double> sentenceScores = calculateScores(filteredSentences);

            // Step 5: Get the top 2 sentences with highest scores
            List<List<String>> topSentences = getTopSentences(sentenceScores, 2);

            // Print each sentence and its score
            /*for (List<String> sentence : topSentences) {
                double score = sentenceScores.get(sentence);
                System.out.println(String.format("Top Sentence: %s%nScore: %f%n", String.join(" ", sentence), score));
            }*/

            // Step 6: Sort the sentences based on their position in the original text
            List<List<String>> sortedSentences = sortSentences(topSentences, filteredSentences);                

            // Print each sentence and its score
            /*for (List<String> sentence : sortedSentences) {
                double score = sentenceScores.get(sentence);
                System.out.println(String.format("Sorted Sentence: %s%nScore: %f%n", String.join(" ", sentence), score));
            }*/

            // Step 7: Join the simplified sentences to form the simplified text
            String simplifiedText = joinSentences(sortedSentences);
            
            allSimplifiedTexts.add(simplifiedText.trim());            
            jTextArea1.append(simplifiedText.trim()+"\n");
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        SentimentAnalysis cf=new SentimentAnalysis();
        cf.setTitle("Sentiment Analysis");
        cf.setVisible(true);
        cf.setResizable(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextSimplification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextSimplification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextSimplification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextSimplification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextSimplification().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private static List<List<String>> tokenize(String text) {
        String[] sentencesArray = text.split("\\.");
        List<List<String>> sentences = new ArrayList<>();
        for (String sentence : sentencesArray) {
            String[] wordsArray = sentence.trim().split("\\s+");
            List<String> words = new ArrayList<>();
            for (String word : wordsArray) {
                words.add(word);
            }
            sentences.add(words);
        }
        return sentences;
    }
    
    private static List<List<String>> filter(List<List<String>> sentences) {
        List<List<String>> filteredSentences = new ArrayList<>();
        for (List<String> sentence : sentences) {
            List<String> filteredWords = new ArrayList<>();
            for (String word : sentence) {
                if (!STOPWORDS.contains(word) && !isPunctuation(word)) {
                    filteredWords.add(word);
                }
            }
            if (!filteredWords.isEmpty()) {
                filteredSentences.add(filteredWords);
            }
        }
        return filteredSentences;
    }
    
    private static boolean isPunctuation(String word) {
        return word.matches("\\p{Punct}+");
    }
    
    private static Map<List<String>, Double> calculateScores(List<List<String>> sentences) {
        Map<List<String>, Double> sentenceScores = new HashMap<>();
        double maxScore = Double.MIN_VALUE;
        for (List<String> sentence : sentences) {
            double score = calculateScore(sentence, sentences);
            sentenceScores.put(sentence, score);
            maxScore = Math.max(maxScore, score);
        }
        for (List<String> sentence : sentences) {
            double score = sentenceScores.get(sentence);
            sentenceScores.put(sentence, score / maxScore);
        }
        return sentenceScores;
    }
    
    private static double calculateScore(List<String> sentence, List<List<String>> sentences) {
        double score = 0.0;
        for (String word : sentence) {
            int wordFrequency = 0;
            for (List<String> s : sentences) {
                if (s.contains(word)) {
                    wordFrequency++;
                }
                   }
            score += wordFrequency / (double) sentences.size();
        }
        return score;
    }

    private static List<List<String>> getTopSentences(Map<List<String>, Double> sentenceScores, int numSentences) {
        List<List<String>> topSentences = sentenceScores.entrySet().stream()
            .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))
            .limit(numSentences)
            .map(Map.Entry::getKey)
            .collect(Collectors.toList());
        return topSentences;
    }

    private static List<List<String>> sortSentences(List<List<String>> sentences, List<List<String>> originalSentences) {
        List<List<String>> sortedSentences = new ArrayList<>();
        for (List<String> originalSentence : originalSentences) {
            if (sentences.contains(originalSentence)) {
                sortedSentences.add(originalSentence);
            }
        }
        return sortedSentences;
    }

    private static String joinSentences(List<List<String>> sentences) {
        StringBuilder simplifiedTextBuilder = new StringBuilder();
        for (List<String> sentence : sentences) {
            for (String word : sentence) {
                simplifiedTextBuilder.append(word).append(" ");
            }
            simplifiedTextBuilder.append(". ");
        }
        return simplifiedTextBuilder.toString().trim();
    }
}
